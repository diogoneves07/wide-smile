import Keyframes from './key-frames';
import PropertiesToAnimateObject from './properties-to-animate-object';
import TargetsAnimationProperty from './targets-animation-property';
import FunctionForPropertyValueInKeyframe from './function-for-property-value-in-keyframe';
import AllNormalObject from './all-normal-objects';
import EasingFunction from './easing-function';
import EasingsFunctionsList from './easings-functions-list';

/* eslint-disable import/no-cycle */
import CreatorFn from './creator-fn';
import AnimationsPropotype from './animations-propotype';

type PerformerFn = CreatorFn['performers'][number];

export type PropertiesForTheCreationOfAnimation = Partial<
  Omit<AnimationInstance, 'targets'>
> &
  Pick<AnimationInstanceProperties, 'targets'>;

export interface AnimationInstance
  extends UserAnimationObjectInternal,
    AnimationsPropotype {}

export type AnimationInstancePropertiesAllWritable = {
  -readonly [K in keyof AnimationInstanceProperties]: AnimationInstanceProperties[K];
};

export type UserAnimationObjectInternal = Required<
  Omit<AnimationInstancePropertiesAllWritable, 'targets'>
> & {
  targets: TargetsAnimationProperty;
};

export default interface AnimationInstanceProperties
  extends UserAnimationOptions {
  targets?: TargetsAnimationProperty;

  /**
   * Gets or defines the animation's progress.
   *
   * The default value is undefined. And throughout the animation is changed in real time.
   */
  progressValue?: number;

  /**
   * The function that created the animation instance.
   * @readonly
   */
  readonly creator?: CreatorFn;

  /**
   * Gets the state in which the animation is.
   *
   * @readonly
   */
  readonly state?:
    | 'waiting'
    | 'loading'
    | 'loaded'
    | 'running'
    | 'paused'
    | 'completed'
    | 'destroyed'
    | 'canceled';

  readonly count?: number;

  /**
   * Defines how far the progress of the current animation cycle can go.
   *
   * The default value is undefined.
   */
  max?: number;

  /**
   * Sets or gets the keyframes.
   */
  keyframes?: PropertiesToAnimateObject | Keyframes;

  /**
   * A unique identifier for each animation instance.
   *
   * The skip for style insertion and determined by the animationId property value of the animation instance, how much the higher its value the more important it is style generated by the animation.
   * @readonly
   */
  readonly animationId?: number;

  /**
   * Defines whether the animation style can be removed or not.
   *
   * The default value is false.
   */
  removeChanges?: boolean;

  performer?: PerformerFn;

  isInCycle?: boolean;

  originalAnimationOptions?: AnimationInstanceProperties;

  skip?: boolean;

  firstRunImmediately?: boolean;
}

type DriveAnimationProperty =
  | number
  | 'normal'
  | 'random-keys'
  | 'random-offset'
  | 'fluid-random-keys'
  | 'fluid-random-offset';

export interface UserAnimationOptions {
  /**
   * The targets that will suffer with the execution of the animation.
   */
  targets?:
    | HTMLElement
    | string
    | (HTMLElement | AllNormalObject | string)[]
    | AllNormalObject;

  /**
   * Callback that triggers every change in the progress of the animation.
   */
  progress?: (progress: number) => void;

  /**
   * Defines how the animation should play.
   *
   * The default value is "normal".
   */
  dir?: 'normal' | 'reverse' | 'alternate' | 'alternate-reverse';

  /**
   * Defines the number of times an animation cycle is played.
   *
   * The default value is 1.
   */
  loop?: number | true;

  /**
   * Defines the time that an animation takes to end one cycle.
   *
   * The default value is 1.
   */
  dur?: number;

  /**
   * Describes how the animation will progress over one cycle of its duration.
   *
   * The default value is "linear".
   */
  easing?: EasingsFunctionsList | EasingFunction;

  /**
   * Defines a interval at the beginning of each animation cycle, and only after that interval the animation begins to run the next cycle.
   *
   * The default value is 0.
   */
  delay?: number;

  /**
   * Defines a intervalo out at the end of each animation cycle, and only after that interval the animation begins to run the next cycle.
   *
   * The default value is 0.
   */
  endDelay?: number;

  /**
   * The amount of cycles that animation has already completed.
   *
   * The default value is 0.
   * @readonly
   */

  /**
   * Control how far the animation cycles should go.
   */
  drive?:
    | DriveAnimationProperty[]
    | (number[] | DriveAnimationProperty)[]
    | DriveAnimationProperty
    | string
    | ((
        target: HTMLElement | AllNormalObject,
        index: number,
        length: number
      ) => DriveAnimationProperty);

  /**
   * Defines whether animation should be destroyed when it is completed.
   *
   * The default value is false.
   */
  autoDestroy?: boolean;

  /**
   * Defines whether the animation should be started automatically.
   *
   * The default value is true.
   */
  autoPlay?: boolean;

  /**
   * Defines whether the animation should be paused when the document is not visible.
   *
   * The default value is true.
   */
  pauseDocHidden?: boolean;

  /**
   * Rounds the property values.
   */
  round?: number;

  /**
   * Sets whether changes made by the animation should be removed after completion.
   */
  reset?: boolean;
}

export type AnimationOptions = Omit<
  UserAnimationOptions,
  'loop' | 'dur' | 'delay' | 'endDelay' | 'originalAnimationOptions'
> & {
  loop?:
    | AnimationInstanceProperties['loop']
    | FunctionForPropertyValueInKeyframe
    | string;

  dur?:
    | AnimationInstanceProperties['dur']
    | FunctionForPropertyValueInKeyframe
    | string;

  delay?:
    | AnimationInstanceProperties['delay']
    | FunctionForPropertyValueInKeyframe
    | string;

  endDelay?:
    | UserAnimationOptions['endDelay']
    | FunctionForPropertyValueInKeyframe
    | string;
};
